// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createCareer = `-- name: CreateCareer :one
INSERT INTO career (Company,Position,Jobtype,Description,StartDate,EndDate)
VALUES ($1, $2,$3,$4,$5,$6)
RETURNING jobid, company, position, jobtype, description, startdate, enddate
`

type CreateCareerParams struct {
	Company     string    `json:"company"`
	Position    string    `json:"position"`
	Jobtype     string    `json:"jobtype"`
	Description string    `json:"description"`
	Startdate   time.Time `json:"startdate"`
	Enddate     time.Time `json:"enddate"`
}

func (q *Queries) CreateCareer(ctx context.Context, arg CreateCareerParams) (Career, error) {
	row := q.db.QueryRow(ctx, createCareer,
		arg.Company,
		arg.Position,
		arg.Jobtype,
		arg.Description,
		arg.Startdate,
		arg.Enddate,
	)
	var i Career
	err := row.Scan(
		&i.Jobid,
		&i.Company,
		&i.Position,
		&i.Jobtype,
		&i.Description,
		&i.Startdate,
		&i.Enddate,
	)
	return i, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (FullName,Age,Gender,Address)
VALUES ($1, $2,$3,$4)
RETURNING profileid, userid, fullname, age, gender, address, phonenumber
`

type CreateProfileParams struct {
	Fullname string `json:"fullname"`
	Age      int32  `json:"age"`
	Gender   string `json:"gender"`
	Address  string `json:"address"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.Fullname,
		arg.Age,
		arg.Gender,
		arg.Address,
	)
	var i Profile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Fullname,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phonenumber,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (Username,Email,PhoneNumber,Password,Role)
VALUES ($1, $2,$3,$4,$5)
RETURNING userid, username, email, phonenumber, password, role, createdat, updatedat
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Email       string `json:"email"`
	Phonenumber string `json:"phonenumber"`
	Password    string `json:"password"`
	Role        string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Phonenumber,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Username,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.Role,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteCareerByJobId = `-- name: DeleteCareerByJobId :one
DELETE
FROM career
WHERE jobid = $1
RETURNING jobid, company, position, jobtype, description, startdate, enddate
`

func (q *Queries) DeleteCareerByJobId(ctx context.Context, jobid int64) (Career, error) {
	row := q.db.QueryRow(ctx, deleteCareerByJobId, jobid)
	var i Career
	err := row.Scan(
		&i.Jobid,
		&i.Company,
		&i.Position,
		&i.Jobtype,
		&i.Description,
		&i.Startdate,
		&i.Enddate,
	)
	return i, err
}

const deleteProfileByUserId = `-- name: DeleteProfileByUserId :one
DELETE
FROM profile
WHERE userid = $1
RETURNING profileid, userid, fullname, age, gender, address, phonenumber
`

func (q *Queries) DeleteProfileByUserId(ctx context.Context, userid int64) (Profile, error) {
	row := q.db.QueryRow(ctx, deleteProfileByUserId, userid)
	var i Profile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Fullname,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phonenumber,
	)
	return i, err
}

const getAllCareerDetails = `-- name: GetAllCareerDetails :many
SELECT jobid, company, position, jobtype, description, startdate, enddate FROM career
`

func (q *Queries) GetAllCareerDetails(ctx context.Context) ([]Career, error) {
	rows, err := q.db.Query(ctx, getAllCareerDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Career
	for rows.Next() {
		var i Career
		if err := rows.Scan(
			&i.Jobid,
			&i.Company,
			&i.Position,
			&i.Jobtype,
			&i.Description,
			&i.Startdate,
			&i.Enddate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProfileDetails = `-- name: GetAllProfileDetails :many
SELECT profileid, userid, fullname, age, gender, address, phonenumber FROM profile
`

func (q *Queries) GetAllProfileDetails(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getAllProfileDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.Profileid,
			&i.Userid,
			&i.Fullname,
			&i.Age,
			&i.Gender,
			&i.Address,
			&i.Phonenumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCareerByJobId = `-- name: GetCareerByJobId :one
SELECT jobid, company, position, jobtype, description, startdate, enddate FROM career
WHERE jobid = $1 LIMIT 1
`

func (q *Queries) GetCareerByJobId(ctx context.Context, jobid int64) (Career, error) {
	row := q.db.QueryRow(ctx, getCareerByJobId, jobid)
	var i Career
	err := row.Scan(
		&i.Jobid,
		&i.Company,
		&i.Position,
		&i.Jobtype,
		&i.Description,
		&i.Startdate,
		&i.Enddate,
	)
	return i, err
}

const getProfileByuserId = `-- name: GetProfileByuserId :one
SELECT profileid, userid, fullname, age, gender, address, phonenumber FROM profile
WHERE userid = $1 LIMIT 1
`

func (q *Queries) GetProfileByuserId(ctx context.Context, userid int64) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByuserId, userid)
	var i Profile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Fullname,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phonenumber,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT userid, username, email, phonenumber, password, role, createdat, updatedat FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Username,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.Role,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT userid, username, email, phonenumber, password, role, createdat, updatedat FROM users
WHERE phonenumber = $1 LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phonenumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phonenumber)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Username,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.Role,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getallusersEmail = `-- name: GetallusersEmail :many

SELECT email FROM users WHERE role = 'user'
`

func (q *Queries) GetallusersEmail(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getallusersEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCareerByJobId = `-- name: UpdateCareerByJobId :one
UPDATE career
SET company=$1,position=$2,jobtype=$3,description=$4
WHERE jobid = $5
RETURNING jobid, company, position, jobtype, description, startdate, enddate
`

type UpdateCareerByJobIdParams struct {
	Company     string `json:"company"`
	Position    string `json:"position"`
	Jobtype     string `json:"jobtype"`
	Description string `json:"description"`
	Jobid       int64  `json:"jobid"`
}

func (q *Queries) UpdateCareerByJobId(ctx context.Context, arg UpdateCareerByJobIdParams) (Career, error) {
	row := q.db.QueryRow(ctx, updateCareerByJobId,
		arg.Company,
		arg.Position,
		arg.Jobtype,
		arg.Description,
		arg.Jobid,
	)
	var i Career
	err := row.Scan(
		&i.Jobid,
		&i.Company,
		&i.Position,
		&i.Jobtype,
		&i.Description,
		&i.Startdate,
		&i.Enddate,
	)
	return i, err
}

const updateProfileByuserId = `-- name: UpdateProfileByuserId :one
UPDATE profile
SET FullName=$1,Age=$2,Gender=$3,Address=$4
WHERE userid = $5
RETURNING profileid, userid, fullname, age, gender, address, phonenumber
`

type UpdateProfileByuserIdParams struct {
	Fullname string `json:"fullname"`
	Age      int32  `json:"age"`
	Gender   string `json:"gender"`
	Address  string `json:"address"`
	Userid   int64  `json:"userid"`
}

func (q *Queries) UpdateProfileByuserId(ctx context.Context, arg UpdateProfileByuserIdParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfileByuserId,
		arg.Fullname,
		arg.Age,
		arg.Gender,
		arg.Address,
		arg.Userid,
	)
	var i Profile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Fullname,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phonenumber,
	)
	return i, err
}
